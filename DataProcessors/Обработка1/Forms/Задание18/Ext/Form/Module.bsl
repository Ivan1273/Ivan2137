
#Область ОбработчикиСобытийФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИмяТаблицыФормы

&НаКлиенте
Процедура ДеревоПриИзменении(Элемент)
	// обнуляем для повторного расчета 
	АдресРезультата = Неопределено;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РешитьНаКлиенте(Команда)
	РасчетГрафаНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура РешитьНаСервере(Команда)
	РасчетГрафаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	// Проверка адреса временного хранилища
	Если Не ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		ПоказатьПредупреждение(, "Расчета не было");
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресРезультата); // получаем по адресу наши данные
	Если СтруктураДанных = Неопределено Тогда
		ПоказатьПредупреждение(, "Расчета не было");
		Возврат;
	КонецЕсли;
	
	ТабДокумент = ПечатьНаСервере(СтруктураДанных);
	ТабДокумент.Показать();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДерева

&НаСервере
Процедура ЗаполнитьНаСервере()
	ДеревоЗначений = РеквизитФормыВЗначение("Дерево");
	ДеревоЗначений.Строки.Очистить(); // очищаем дерево
	
	Рандом = Новый ГенераторСлучайныхЧисел();
	// Задаем количество строк в дереве
	КоличествоСтрок = Рандом.СлучайноеЧисло(1, 2); 
	
	// Формируем дерево
	Для Индекс = 1 По КоличествоСтрок Цикл
		НоваяСтрока = ДеревоЗначений.Строки.Добавить(); // добавили строку
		НоваяСтрока.Значение = Рандом.СлучайноеЧисло(1, 100);
		// Задаем количество подстрок
		ГлубинаДерева = Рандом.СлучайноеЧисло(1,2);
		// Создает рекурсией подстроки
		ЗаполнитьСтрокиРекурсивно(НоваяСтрока, ГлубинаДерева, Рандом);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "Дерево");
	АдресРезультата = Неопределено; // обнуляем для повторного расчета
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиРекурсивно(Строка, ГлубинаДерева, Рандом)
	
	// если спустились достаточно глубоко, то выход
	Если Строка.Уровень() > ГлубинаДерева Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок = Рандом.СлучайноеЧисло(1, 3); 
	
	Для Индекс = 1 По КоличествоСтрок Цикл
		НоваяСтрока = Строка.Строки.Добавить(); // добавили строку
		НоваяСтрока.Значение = Рандом.СлучайноеЧисло(1, 100);
		// Создает рекурсией подстроки
		ЗаполнитьСтрокиРекурсивно(НоваяСтрока, ГлубинаДерева, Рандом);
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область ПоискПутейНаКлиенте

&НаКлиенте
Процедура РасчетГрафаНаКлиенте()
	// Создадим структуру, куда будем сохранять мин. значение и пути к этому значению
	СтруктураДанных = Новый Структура("Пути, МинимальноеЗначение", Новый Массив, 10000);
	ИндексСтроки = 0;
	
	Для каждого СтрокаДерева Из Дерево.ПолучитьЭлементы() Цикл
		ПрефиксПути = "";
		// Рекурсивно ищем мин. в подстроках данной строки
		НайтиПутьНаКлиентеРекурсивно(СтрокаДерева, ПрефиксПути, СтруктураДанных, ИндексСтроки);
		ИндексСтроки = ИндексСтроки +1;
	КонецЦикла;
	
	// Поместим результат во временное хранилище
	АдресРезультата = ПоместитьВоВременноеХранилище(СтруктураДанных, ЭтаФорма.УникальныйИдентификатор);
КонецПроцедуры 

&НаКлиенте
Процедура НайтиПутьНаКлиентеРекурсивно(СтрокаДерева, ПрефиксПути, СтруктураДанных, ИндексСтроки)
	// Формимируем текущий путь
	Если ПрефиксПути = "" Тогда
		ТекущийПуть = ИндексСтроки;
	Иначе 
		ТекущийПуть = "" + ПрефиксПути + "," + ИндексСтроки;
	КонецЕсли;
	
	Если СтрокаДерева.Значение <= СтруктураДанных.МинимальноеЗначение Тогда
		Если СтрокаДерева.Значение < СтруктураДанных.МинимальноеЗначение Тогда // если новый мин. то обновляем массив
			СтруктураДанных.Пути = Новый Массив; // так как мин обновился нужно удалить пути старого мин.
			СтруктураДанных.МинимальноеЗначение = СтрокаДерева.Значение; // записываем в структуру новое значение мин.
		КонецЕсли;
		СтруктураДанных.Пути.Добавить(ТекущийПуть); // добавляем текущий путь в массив
	КонецЕсли;
	
	ИндексПодстроки = 0;
	// Если у текущей строки есть подстроки то снова запускаем рекурсию
	Для каждого ПодстрокаДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
		НайтиПутьНаКлиентеРекурсивно(ПодстрокаДерева, ТекущийПуть, СтруктураДанных, ИндексПодстроки);
		ИндексПодстроки = ИндексПодстроки + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПоискПутейНаСервере

&НаСервере
Процедура РасчетГрафаНаСервере()
	ДеревоЗначений = РеквизитФормыВЗначение("Дерево");
	СтруктураДанных = Новый Структура("Пути, МинимальноеЗначение", Новый Массив, 10000);
	
	Для каждого СтрокаДерева Из ДеревоЗначений.Строки Цикл
		ПрефиксПути = "";
		// Поиск минимального значения
		НайтиПутьНаСервереРекурсивно(СтрокаДерева, ПрефиксПути, СтруктураДанных, ДеревоЗначений.Строки.Индекс(СтрокаДерева));
	КонецЦикла;
	
	// Поместим результат во временное хранилище
	АдресРезультата = ПоместитьВоВременноеХранилище(СтруктураДанных, ЭтаФорма.УникальныйИдентификатор);
КонецПроцедуры

&НаСервере
Процедура НайтиПутьНаСервереРекурсивно(СтрокаДерева, ПрефиксПути, СтруктураДанных, ИндексСтроки)
	// Формимируем текущий путь
	Если ПрефиксПути = "" Тогда
		ТекущийПуть = ИндексСтроки;
	Иначе 
		ТекущийПуть = "" + ПрефиксПути + "," + ИндексСтроки;
	КонецЕсли;
	
	Если СтрокаДерева.Значение <= СтруктураДанных.МинимальноеЗначение Тогда
		Если СтрокаДерева.Значение < СтруктураДанных.МинимальноеЗначение Тогда // если новый мин. то обновляем массив
			СтруктураДанных.Пути = Новый Массив; // так как мин обновился нужно удалить пути старого мин.
			СтруктураДанных.МинимальноеЗначение = СтрокаДерева.Значение; // записываем в структуру новое значение мин.
		КонецЕсли;
		СтруктураДанных.Пути.Добавить(ТекущийПуть); // добавляем текущий путь в массив
	КонецЕсли;
	// Если у текущей строки есть подстроки то снова запускаем рекурсию
	Для каждого ПодСтрокаДерева Из СтрокаДерева.Строки Цикл
		НайтиПутьНаСервереРекурсивно(ПодСтрокаДерева, ТекущийПуть, СтруктураДанных, СтрокаДерева.Строки.Индекс(ПодСтрокаДерева))
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

&НаСервере
Функция ПечатьНаСервере(СтруктураДанных)
	// создание нового табличного документа
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = Обработки.Обработка1.ПолучитьМакет("ТаблицаРезультата"); // получаем макет
	// получим область "Заголовок"
	ОбластиЯчейкиЗаголовка = Макет.ПолучитьОбласть("Заголовок|Колонка");
	// выведем заполненную область "Заголовок" в табличный документ
	ТабличныйДокумент.Вывести(ОбластиЯчейкиЗаголовка);
	// выведем область "Шапка" в табличный документ 
	ОбластьЯчейкиШапкиРезультата = Макет.ПолучитьОбласть("ШапкаЗначения|Колонка");
	// заполним параметр минимальноеЗначение
	ОбластьЯчейкиШапкиРезультата.Параметры.МинимальноеЗначение = СтруктураДанных.МинимальноеЗначение;
	ТабличныйДокумент.Присоединить(ОбластьЯчейкиШапкиРезультата);
	// получение области путей
	ОбластиЯчеекПутейРезультата = Макет.ПолучитьОбласть("ЗначениеПути"); 
	
	// вывод строк документа в печатную форму
	Для каждого Результат Из СтруктураДанных.Пути Цикл
		ОбластиЯчеекПутейРезультата.Параметры.Путь = Результат;
		ТабличныйДокумент.Вывести(ОбластиЯчеекПутейРезультата);
	КонецЦикла; 
	
	//установим параметры отображения табличного документа
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	Возврат ТабличныйДокумент;
КонецФункции

#КонецОбласти

#КонецОбласти


